cmake_minimum_required(VERSION 3.15 FATAL_ERROR)
project(DongBoyAdvance VERSION 1.0.0 LANGUAGES C)

set(CMAKE_BUILD_TYPE DEBUG)
set(CMAKE_CURRENT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/source_dba)
set(HELP_MSG "Email john.mushatt@gmail.com and hope he can fix it")


message(STATUS "CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR}")
message(STATUS "CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}")

if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/CPU)
    set(CPU_SRC ${CMAKE_CURRENT_SOURCE_DIR}/CPU)
    #    include_directories(${CPU_SRC})
    #    add_subdirectory(${CPU_SRC})

    message(STATUS "FOUND CPU SOURCE @ ${CPU_SRC}")
else ()
    message(WARNING "COULD NOT FIND CPU SOURCE, GONNA NEED TO FIX THAT!${HELP_MSG}")
endif ()

if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/log)
    set(LOG_SRC ${CMAKE_CURRENT_SOURCE_DIR}/log)
    #    add_subdirectory(${LOG_SRC})
    message(STATUS "FOUND LOG SOURCE @ ${LOG_SRC}")
else ()
    message(WARNING "COULD NOT FIND LOG SOURCE, GONNA NEED TO FIX THAT!${HELP_MSG}")
endif ()
if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/ROM_Parser)
    set(ROM_SRC ${CMAKE_CURRENT_SOURCE_DIR}/ROM_Parser)
    #    add_subdirectory(${LOG_SRC})
    message(STATUS "FOUND ROM SOURCE @ ${ROM_SRC}")
else ()
    message(WARNING "COULD NOT FIND ROM SOURCE, GONNA NEED TO FIX THAT!${HELP_MSG}")
endif ()
#add_subdirectory(${CPU_SRC})
set(EXE_NAME ${PROJECT_NAME}_v${PROJECT_VERSION})
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -Werror -lpthread -lncurses")

file(GLOB_RECURSE DBA_SRC "source_dba/*.c")
file(GLOB_RECURSE DBA_HEADER "source_dba/*.h")

set(DBA_INCLUDE_DIRS "")
foreach (_headerFile ${DBA_HEADER})
    get_filename_component(_dir ${_headerFile} PATH)
    list(APPEND DBA_INCLUDE_DIRS ${_dir})
endforeach ()
list(REMOVE_DUPLICATES DBA_INCLUDE_DIRS)


find_package(Curses REQUIRED)
include_directories(${CURSES_INCLUDE_DIR})

if (${CMAKE_BUILD_TYPE} MATCHES "DEBUG")
    ADD_DEFINITIONS(-D_DEBUG_MODE)
    message(STATUS "Debug Mode")
else ()
    message(STATUS "Release Mode")
endif ()
if ( ${CYGWIN})
    message(STATUS "Cygwin found, setting definition to start cygserver!")
    ADD_DEFINITIONS(-D_CYGWIN)
else ()
    message(STATUS "Cygwin not found!")

endif ()
add_executable(${EXE_NAME} main.c ${DBA_SRC})
target_include_directories(${EXE_NAME} PRIVATE ${LOG_SRC} ${CPU_SRC} ${ROM_SRC})

target_link_libraries(${EXE_NAME} ${CURSES_LIBRARIES})
